" VIM 配置（终端环境）
" Iceway Zhang
" {vim:set shiftwidth=4 tabstop=4 softtabstop=4 expandtab:} "

""" ### VIM 特性配置 {{{
set nocompatible			" 不使用vi兼容模式

set ruler				" 显示状态栏光标标尺
set cursorline				" 突出显示当前行
set number				" 显示行号
"set relativenumber			" 显示相对（当前光标所在行）行号而不是绝对行号
set hlsearch				" 高亮搜索结果
set incsearch				" 输入搜索内容时就同步显示搜索结果
"set ignorecase				" 搜索时大小写不敏感
"set nowrap				" 长度超过窗口宽度不要换行显示
"set list				" 让VIM显示空格、tab、换行等不可见字符
"set listchars=nbsp:¬,trail:·,tab:»	" 设置VIM把空格、换行、tab显示为什么字符
set scrolloff=3				" 光标移动到顶部和底部时自动保持3行距离
set showmatch				" 显示自动匹配到的对应括号
set showmode				" 让VIM在窗口最低下显示当前模式，如--INSERT--等
set showcmd				" 在命令模式下输入命令时，同步显示已经键入的命令内容
set nobackup				" 保存文件时，不要创建备份文件
set textwidth=0				" 一行内输入字符达到多少时自动换行，0表示不限制
set history=500				" 记录的历史命令个数

"set shiftwidth=4			" 设定VIM的自动缩进，以及>和<命令时移动的空白长度
"set softtabstop=4			" 按下tab时，插入的是空格和tab制表符的混合，具体方式参见:help softtabstop
"set tabstop=4				" 设定tab长度为4字节
"set expandtab				" 键入tab时，自动用空格替换tab，空格长度等于tabstop的设置

set backspace=indent,eol,start		" 退格键（backspace）默认工作vi模式下。该设置可以让退格键工作在大家熟悉的方式下。
					" indent: 如果设置了:set indent等自动缩进，按退格键会删掉这个缩进。
					" eol: 如果插入模式下在行开头，设置了eol后按下退格键会合并到上一行。
					" start: 若不设置为start，则在回退时，只能回退删除自己新添加的字符，原来已经存在的字符无法回退删除。
set pastetoggle=<F3>			" 按下F3键可以切换粘贴插入模式[Insert (paste)]和普通插入模式。
set viminfo='100,f1,<500

"map <C-H> <C-W>h
"map <C-J> <C-W>j
"map <C-K> <C-W>k
"map <C-L> <C-W>l
cmap w!! w !sudo tee >/dev/null %

" 不重启VIM，让配置文件保存后立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 打开文件后，自动跳转到上一次退出时所在行
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif

" 启用VIM内置的man page reviewer，可以用命令`:Man XXX`查看手册页
runtime! ftplugin/man.vim
" ### }}} VIM 特性配置结束

" ############################################################################ "
" ###############      VIM插件：使用vim-plug 管理插件      ################### "
" ############################################################################ "
" {{{ plugins

let iCanHazPlug=1
let plug_file=expand('~/.vim/plugs/vim-plug/autoload/plug.vim')
if !filereadable(plug_file)
    echo "Installing vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/plugs/vim-plug/autoload/
    silent !curl -fLo ~/.vim/plugs/vim-plug/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let iCanHazPlug=0
endif

" 设置包括vim-plug和初始化相关的runtime path
set rtp+=~/.vim/plugs/vim-plug
call plug#begin('~/.vim/plugs')

"Plug 'altercation/vim-colors-solarized'
	"let g:solarized_termcolors=256
"Plug 'chriskempson/vim-tomorrow-theme'
Plug 'tomasr/molokai'
	let g:rehash256 = 1
"Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
      set noshowmode
      set laststatus=2
      let g:airline_theme='powerlineish'
      let g:airline_powerline_fonts = 1
      let g:airline_detect_whitespace = 1
      let g:airline#extensions#tabline#enabled = 1
      let g:airline#extensions#hunks#non_zero_only = 1
Plug 'SirVer/ultisnips'
      let g:UltiSnipsExpandTrigger = "<c-j>"
      let g:UltiSnipsJumpForwardTrigger = "<c-j>"
      let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
Plug 'honza/vim-snippets'
Plug 'Valloric/YouCompleteMe'
      let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
      let g:ycm_show_diagnostics_ui = 0
      let g:ycm_confirm_extra_conf = 0
      let g:ycm_collect_identifier_from_comments_and_strings = 0
      let g:ycm_complete_in_strings = 1
      let g:ycm_complete_in_comments = 1
      let g:ycm_semantic_triggers = {
      	\ 'c,cpp,python,java,lua,javascript': ['re!\w{2}']
      	\ }
      let g:ycm_filetype_whitelist = {
      	\ "c":1, "cpp":1, "sh":1, "zsh":1
      	\ }
Plug 'tenfyzhong/CompleteParameter.vim'
	inoremap <silent><expr> ( complete_parameter#pre_complete("()")
	let g:complete_parameter_use_ultisnips_mapping = 1
	"smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
	"imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
	"smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
	"imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
"Plug 'Valloric/ListToggle'
Plug 'majutsushi/tagbar'
	nmap <F2> :TagbarToggle<CR>
"Plug 'ctrlp.vim'
	"let g:ctrlp_follow_symlinks=1
	"let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|.rvm$'
Plug 'scrooloose/syntastic'
	let g:syntastic_error_symbol='✗'
	let g:syntastic_warning_symbol='⚠'
	let g:syntastic_check_on_open=0
	let g:syntastic_check_on_wq=1
	let g:syntastic_auto_loc_list=1
Plug 'easymotion/vim-easymotion'
"Plug 'The-NERD-tree'
"Plug 'The-NERD-Commenter'
"Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'lilydjwg/colorizer'
Plug 'sheerun/vim-polyglot'
"Plug 'scrooloose/nerdtree'
"Plug 'tpope/vim-eunuch'
Plug 'guns/xterm-color-table.vim'
Plug 'Yggdroot/indentLine'
	let g:indentLine_char='┆'
	let g:indentLine_enabled = 1
	let g:indentLine_color_term = 239
Plug 'tell-k/vim-autopep8'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
	let g:vim_markdown_folding_disabled = 1
	let g:vim_markdown_conceal = 0

" 安装了vim-plug后，首次自动安装插件
if iCanHazPlug == 0
    echo "Installing plugins, please ignore key map error messages"
    echo ""
    :PlugInstall
endif

" 你的所有插件需要在下面这行之前
call plug#end()
" }}} End of Vundle Setting

autocmd FileType python setlocal et sta sw=4 sts=4
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" 开启语法高亮显示，终端支持256色。
syntax on
set t_Co=256
" 设置色彩空间为暗色调，使用molokai配色方案
set background=dark
colorscheme molokai
